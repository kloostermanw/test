#!/usr/bin/env python

# pip install gitpython
import git
import os
import re
import sys
import threading
import time
import itertools
from subprocess import call
import configparser

blnDone = False
sourceBranch = 'develop'
targetBranch = 'master'

def getNextRelease(strRelease):
    x = re.findall("^(v\d{1,4}\.\d{1,4}\.)(\d{1,4})$", strRelease)
    next = str(int(x[0][1]) + 1)
    return x[0][0] + next

def animate(var):
    global blnDone
    global sourceBranch
    global targetBranch
    if (var == 'd'):
        var = sourceBranch
    else:
        var = targetBranch
    for c in itertools.cycle(['|', '/', '-', '\\']):
        if blnDone:
            break
        sys.stdout.write('\rPush to ' + var + ' ' + c)
        sys.stdout.flush()
        time.sleep(0.1)
    sys.stdout.write('\rPush to ' + var + ' done.\n')

def runCommand(strCmd, strArgs):
    arrCmdAndArgs = []
    if strArgs != 'none':
        arrCmdAndArgs = strArgs.split()

    arrCmdAndArgs.insert(0, strCmd)
    if strCmd != 'none':
        call(arrCmdAndArgs)

# Main

def main():
    global blnDone
    global sourceBranch
    global targetBranch
    blnVerbose = False

    # Check if current directory is a git repo
    if (os.path.exists(".git") == False):
        print(".git not found.")
        exit(0)

    # Check for Configfile
    if (os.path.exists(".gitrelease") == False):
        print(".gitrelease not found")
        exit(0)

    config = configparser.ConfigParser()
    config.sections()
    config.read('.gitrelease')
    default = config['DEFAULT']

    strVerbose = default.get('verbose', fallback='false')
    sourceBranch = default.get('source', fallback='develop')
    targetBranch = default.get('target', fallback='master')
    strEditor = default.get('editor', fallback='none')
    strFileName = default.get('filename', fallback='none')
    strFileCommitMessage = default.get('file_commit_message', fallback='')
    strCommand1 = default.get('cmd1', fallback='none')
    strArguments1 = default.get('cmd1_arguments', fallback='none')
    strCommand2 = default.get('cmd2', fallback='none')
    strArguments2 = default.get('cmd2_arguments', fallback='none')

    if (strVerbose.lower() == 'true'):
        blnVerbose = True

    if strEditor != 'none':
        if (os.path.exists(strFileName) == False):
            print("file " + strFileName + " does not exist")
            exit(0)

    repo = git.Repo(search_parent_directories=True)
    branch = repo.active_branch

    if branch.name == sourceBranch:
        if blnVerbose:
            print(branch.name)
    else:
        print('no ' + sourceBranch + ' branch found')
        exit(0)

    if repo.untracked_files:
        print(sourceBranch + ' branch has untracked files')
        exit(0)

    if repo.is_dirty():
        print(sourceBranch + ' branch has uncommitted files')
        exit(0)

    tags = sorted(repo.tags, key=lambda t: t.commit.committed_datetime)

    strLatestTag = "v0.0.0"
    if len(tags) > 0:
        strLatestTag = str(tags[-1])

    print("Current release: " + strLatestTag)

    strNextRelease = getNextRelease(strLatestTag)

    string = "Give new Release [" + strNextRelease + "]: "
    new_tag = (input(string) or strNextRelease)
    print("new release: " + new_tag)

    # https://git-flow.readthedocs.io/en/latest/releases.html
    #
    # git flow release start v1.4.0 or
    # git checkout -b release/v0.0.5 develop

    strReleaseBranch = "release/" + new_tag
    repo.git.checkout('HEAD', b=strReleaseBranch)

    strArguments1 = strArguments1.replace("{current_release}", strLatestTag)
    strArguments1 = strArguments1.replace("{new_release}", new_tag)

    strArguments2 = strArguments2.replace("{current_release}", strLatestTag)
    strArguments2 = strArguments2.replace("{new_release}", new_tag)

    if blnVerbose:
        print(strCommand1 + " " + strArguments1)

    if strFileName != 'none':
        # Generate CHANGELOG
        if strCommand1 != 'none':
            runCommand(strCommand1, strArguments1)

        # Manual Change CHANGELOG
        if strEditor != 'none':
            EDITOR = os.environ.get('EDITOR',strEditor)
            f = open(strFileName, "r")
            call([EDITOR, f.name])

        # git add CHANGELOG
        repo.index.add(strFileName)
        print("Commit " + strFileName)

        # git commit -m "docs: update CHANGELOG"
        repo.index.commit(strFileCommitMessage)

    t = threading.Thread(target=animate, args='m')
    t.start()

    # git checkout target
    repo.git.checkout(targetBranch)

    # git merge --no-ff release/v0.0.4 -m "Merge branch 'release/v0.0.4'"
    strMessage= "Merge branch '" + strReleaseBranch + "'"
    repo.git.merge(strReleaseBranch, m=strMessage, no_ff=True)

    # git tag -a v0.0.5 -m v0.0.5
    repo.git.tag(m=new_tag, a=new_tag)

    # git push -u origin target
    repo.git.push(targetBranch, u='origin', tags=True)

    blnDone = True
    time.sleep(0.2)
    blnDone = False
    t = threading.Thread(target=animate, args='d')
    t.start()

    # git checkout develop
    repo.git.checkout(sourceBranch)

    # git merge --no-ff target -m "Merge tag 'v0.0.14' into develop"
    strMessage= "Merge tag '" + new_tag + "' into " + sourceBranch
    repo.git.merge(targetBranch, m=strMessage, no_ff=True)

    # git branch -d release/v0.0.6
    repo.git.branch(d=strReleaseBranch)

    # git push -u origin develop
    repo.git.push(sourceBranch, u='origin', tags=True)

    blnDone = True
    time.sleep(0.2)

    print("Release " + new_tag + " done.")

    if blnVerbose:
        print(strCommand2 + " " + strArguments2)

    runCommand(strCommand2, strArguments2)

if __name__== "__main__":
   main()
